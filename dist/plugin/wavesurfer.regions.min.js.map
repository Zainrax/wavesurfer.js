{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/plugin/regions/index.js","webpack://WaveSurfer/./src/plugin/regions/region.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, () => {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    region.edgeScrollWidth = this.params.edgeScrollWidth ||\n                        this.wrapper.clientWidth * scrollWidthProportion;\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params, eventParams) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element.domElement);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 2,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        const eventParams = {\n            direction: this._getDragDirection(delta),\n            action: 'drag'\n        };\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        }, eventParams);\n    }\n\n    /**\n     * Returns the direction of dragging region based on delta\n     * Negative delta means region is moving to the left\n     * Positive - to the right\n     * For zero delta the direction is not defined\n     * @param {number} delta Drag offset\n     * @returns {string|null} Direction 'left', 'right' or null\n     */\n    _getDragDirection(delta) {\n        if (delta < 0) {\n            return 'left';\n        }\n        if (delta > 0) {\n            return 'right';\n        }\n        return null;\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        const eventParams = {\n            action: 'resize',\n            direction: direction === 'start' ? 'right' : 'left'\n        };\n\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            }, eventParams);\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            }, eventParams);\n        }\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","_region","require","_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","_defineProperties","props","descriptor","arg","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","RegionsPlugin","params","ws","_this","instance","Constructor","_classCallCheck","this","wavesurfer","util","getRegionSnapToGridValue","maxRegions","regionsMinLength","getOwnPropertyNames","Observer","Region","_onBackendCreated","wrapper","drawer","orientation","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","vertical","dragSelection","enableDragSelection","id","updateRender","protoProps","staticProps","name","deferInit","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","isReady","once","un","_this2","wouldExceedMaxRegions","minLength","on","_this3","remove","_this4","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","_this5","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","default","regionsUtils","_params$showTooltip","style","regionsUtil","getId","resize","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","eventParams","updateHandlesResize","element","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","top","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","cursorStyle","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}